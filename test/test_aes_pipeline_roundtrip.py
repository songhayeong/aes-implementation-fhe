from __future__ import annotations
import json
from pathlib import Path
from typing import Any, Dict, List, Tuple
import numpy
import numpy as np

from engine_context import EngineContext
from pipeline import AESPipeline
from mixcol_final import MixColFinal
from invmixcolumns_fhe import InvMixColumnsFHE
from xor4_lut import XOR4LUT

import time

# --------- coeff loader ------------
COEFF_DIR = Path(__file__).parent.parent / "generator" / "coeffs"


def load_coeff2d(path: Path, n: int = 16) -> np.ndarray:
    data = json.loads(path.read_text(encoding="utf-8"))
    A = np.zeros((n, n), dtype=np.complex128)
    for p, q, re, im in data["entries"]:
        A[p, q] = complex(re, im)
    return A


def load_lut1d(path: Path) -> np.ndarray:
    data = json.loads(path.read_text(encoding="utf-8"))
    deg = max(int(k) for k, *_ in data["entries"])
    A = np.zeros(deg + 1, dtype=np.complex128)
    for k, re, im in data["entries"]:
        A[int(k)] = complex(re, im)
    return A


def load_all_coeffs(coeff_dir: Path) -> Dict[str, Any]:
    coeffs = {}
    coeffs["xor4"] = load_coeff2d(coeff_dir / "xor4_coeffs.json", 16)
    coeffs["sub_hi"] = load_lut1d(coeff_dir / "mod256_to_16_hi.json")
    coeffs["sub_lo"] = load_lut1d(coeff_dir / "mod256_to_16_lo.json")
    coeffs["inv_sub_hi"] = load_lut1d(coeff_dir / "inv_mod256_to_16_hi.json")
    coeffs["inv_sub_lo"] = load_lut1d(coeff_dir / "inv_mod256_to_16_lo.json")
    return coeffs


# --------- AES-128 Key schedule (roundkey generation) ----------
# 표준 S-box (encryption)
_SBOX = np.array([
    # 0x00..0x0F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    # 0x10..0x1F
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    # 0x20..0x2F
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    # 0x30..0x3F
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    # 0x40..0x4F
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    # 0x50..0x5F
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    # 0x60..0x6F
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    # 0x70..0x7F
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    # 0x80..0x8F
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    # 0x90..0x9F
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    # 0xA0..0xAF
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    # 0xB0..0xBF
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    # 0xC0..0xCF
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    # 0xD0..0xDF
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    # 0xE0..0xEF
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    # 0xF0..0xFF
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
], dtype=np.uint8)

_RCON = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36], dtype=np.uint8)


def _rot_word(w: np.ndarray) -> np.ndarray:
    return np.roll(w, -1)


def _sub_word(w: np.ndarray) -> np.ndarray:
    return _SBOX[w]


def expand_aes128_key(master: np.ndarray) -> List[np.ndarray]:
    """master: (16,) uint8 → round keys 11개 (각 16바이트)"""
    assert master.shape == (16,)
    w = master.copy().astype(np.uint8).reshape(4, 4).T  # 4x4, 열 단위 words
    round_keys = [w.T.reshape(16).copy()]  # rk0

    for i in range(10):
        t = _rot_word(w[:, 3].copy())
        t = _sub_word(t)
        t[0] ^= _RCON[i]
        w[:, 0] ^= t
        w[:, 1] ^= w[:, 0]
        w[:, 2] ^= w[:, 1]
        w[:, 3] ^= w[:, 2]
        round_keys.append(w.T.reshape(16).copy())
    return round_keys  # len=11


# ------------ for test ------------
if __name__ == "__main__":
    # 1) 엔진
    ctx = EngineContext(signature=1, max_level=17, mode="cpu", thread_count=4)

    # 2) 계수 로드
    coeffs = load_all_coeffs(COEFF_DIR)
    xor_coeff = coeffs["xor4"]
    xor4 = XOR4LUT(ctx, xor_coeff)

    # 3) MixColumns / InvMixColumns 인스턴스 (필요 시 커스텀 전달 가능)
    mix_fwd = MixColFinal(ctx, xor4)
    mix_inv = InvMixColumnsFHE(ctx, xor4)

    # 4) 파이프라인
    pipeline = AESPipeline(
        ctx, coeffs,
        mixcolumns=mix_fwd,
        inv_mixcolumns=mix_inv,
        use_hard_renorm_between_steps=True  # 안정성 위해 켜두기(느리면 False로)
    )

    # 5) 랜덤 키/평문
    np.random.seed(7)
    key = np.random.randint(0, 256, 16, dtype=np.uint8)
    rks = expand_aes128_key(key)  # 11개

    pt = np.random.randint(0, 256, 16, dtype=np.uint8)

    enc_t0 = time.perf_counter()
    # 6) 암호화
    ct_hi, ct_lo = pipeline.encrypt(pt, rks)
    enc_t1 = time.perf_counter()

    print(f"enc time: {enc_t1 - enc_t0:.3f}s")

    dec_t0 = time.perf_counter()
    # 7) 복호화 (암호문 그대로 넣음)
    dec_hi, dec_lo = pipeline.decrypt(ct_hi, ct_lo, rks)
    dec_t1 = time.perf_counter()

    print(f"dec time: {dec_t1 - dec_t0:.3f}s")
    print(f"total time (1round) : {dec_t1 - enc_t0:.3f}s")

    # 8) 복호 평문 복원
    recovered = pipeline.encoder.decode(dec_hi, dec_lo)

    print("Master Key  :", key.tolist())
    print("Plaintext   :", pt.tolist())
    print("Recovered   :", recovered.tolist())
    print("Round-trip OK?", np.array_equal(pt, recovered))
